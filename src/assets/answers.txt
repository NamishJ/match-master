export function coordinatesFromFlatIndex(
    pos: number,
    numRows: number,
    numCols: number
) {
    let row  = Math.floor(pos / numRows);
    let col = pos % numCols;
    return [row, col];
}

export function isAdjacentToEmpty(pos: number, emptyPos: number) {

    let [posRow, posCol] = coordinatesFromFlatIndex(pos);
    let [emptyPosRow, emptyPosCol] = coordinatesFromFlatIndex(emptyPos);

    let sameRow = posRow == emptyPosRow;
    let sameCol = posCol == emptyPosCol;
    let adjCol = posCol == emptyPosCol - 1 || posCol == emptyPosCol + 1
    let adjRow = posRow == emptyPosRow - 1 || posRow == emptyPosRow + 1

    return (sameRow && adjCol) || (sameCol && adjRow);
}

export function getAdjacentFlatIndex(
    pos: number, 
    dir: direction,
    numRows: number,
    numCols: number
) {
    /* 
    Returns index of cell adjacent to {pos} in {direction}.
    Returns -1 if out of bounds.
    */

    let [row, col] = coordinatesFromFlatIndex(pos);

    console.log(row, col, pos)
    switch(dir) {
        case 'up':
            row--;
            break;
        case 'down':
            row++;
            break;
        case 'left':
            col--;
            break;
        case 'right':
            col++;
            break;
        default: 
            return -1;
    }

    if(row < 0 || row > numRows || col < 0 || col > numCols) {
        return -1;
    }

    let flatIdx = row * numCols + col;
    return flatIdx;
}